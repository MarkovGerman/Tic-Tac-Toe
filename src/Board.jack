class Board
{
    field Array cells;
    field int length;
    field char winnerValue;

    constructor Board new(int Length)
    {
        var int i, j;
        var Array row;
        let length = Length;
        let cells = Array.new(length);
        let i = 0;
        while (i < length)
        {
            let cells[i] = Array.new(length);
            let j = 0;
            while (j < length)
            {
                let row = cells[i];
                let row[j] = Cell.new(i, j, CellValue.empty());
                let j = j + 1;
            }

            let i = i + 1;
        }
        let winnerValue = CellValue.empty();
        return this;
    }

    method char getWinnerChar(){
        return winnerValue;
    }

    method void makeMove(Cell cell)
    {
        var Array row;
        var int x, y;
        let x = cell.getX(); let y = cell.getY();
        let row = cells[x];
        let row[y] = cell;
        return;
    }

    method boolean checkWinner()
    {
        var int i;
        var boolean isRowWinner, isColumnWinner;
        var boolean isMainDiagWinner, isSecondaryDiagWinner, isWinner;

        let i = 0;
        let isWinner = false;
        while ((i < length) & (~isWinner))
        {
            let isRowWinner = IsRowWin(i); let isColumnWinner = IsColumnWin(i);
            if (isRowWinner | isColumnWinner){
                return true;
            }
            let i = i + 1;
        }
        let isMainDiagWinner = IsMainDiagWin(); let isSecondaryDiagWinner = IsSecondaryDiagWin();
        return isMainDiagWinner | isSecondaryDiagWinner;
    }

    method boolean IsRowWin(int number)
    {
        var int i;
        var Array row;
        var Cell cell;
        let i = 1;
        let row = cells[number];
        while (i < length){
            if (~(row[i] = row[i - 1]))
            {
                return false;
            }
            let i = i + 1;
        }
        let cell = row[i];
        let winnerValue = cell.getValue();
        return true;
    }

    method boolean IsColumnWin(int number)
    {
        var int i;
        var Cell cell;
        var Array row, previousRow;
        let i = 1;
        while (i < length){
            let row = cells[i]; let previousRow = cells[i - 1];
            if (~(row[number] = previousRow[number]))
            {
                return false;
            }
            let i = i + 1;
        }
        let cell = row[number];
        let winnerValue = cell.getValue();
        return true;
    }

    method boolean IsMainDiagWin()
    {
        var int i;
        var Cell cell;
        var Array row, previousRow;
        let i = 1;
        while (i < length){
            let row = cells[i]; let previousRow = cells[i-1];
            if (~(row[i] = previousRow[i - 1]))
            {
                return false;
            }
            let i = i + 1;
        }
        let cell = row[i];
        let winnerValue = cell.getValue();
        return true;
    }

    method boolean IsSecondaryDiagWin()
    {
        var int i;
        var Cell cell;
        var Array row, previousRow;

        let i = 1;
        while (i < length){
            let row = cells[i]; let previousRow = cells[i-1];
            if (~(previousRow[length - i] = row[length - 1 - i]))
            {
                return false;
            }
            let i = i + 1;
        }
        let cell = row[i];
        let winnerValue = cell.getValue();
        return true;
    }

    method boolean allCellsFilled()
    {
        var int i, j;
        var Array row;
        var Cell cell;
        let i = 0;
        while (i < length)
        {
            let row = cells[i];
            let j = 0;
            while (j < length)
            {
                let cell = row[j];
                if (~(cell.isFilled())){
                    return false;
                }
            }
        }
        return true;
    }

    method void clear(){
        var int i, j;
        var Array row;
        let cells = Array.new(length);
        let i = 0;
        while (i < length)
        {
            let cells[i] = Array.new(length);
            let j = 0;
            while (j < length)
            {
                let row = cells[i];
                let row[j] = Cell.new(i, j, CellValue.empty());
                let j = j + 1;
            }

            let i = i + 1;
        }
        let winnerValue = CellValue.empty();
        return;
    }

    method void dispose()
    {
        var int i, j;
        let i = 0;
        do cells.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void print()
    {
        var int i, j;
        var Array row;
        var Cell cell;
        let i = 0;
        while (i < length)
        {
            let j = 0;
            while (j < length)
            {
                let row = cells[i]; let cell = row[j];
                do Output.printChar(cell.getValue());
                let j = j + 1;
            }
            do Output.printChar(String.newLine());
            let i = i + 1;
        }
        return;
    }
}