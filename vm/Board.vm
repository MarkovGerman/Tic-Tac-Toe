function Board.new 3
push constant 3
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 1
push this 1
call Array.new 1
pop this 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
push this 1
call Array.new 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 1
lt
not
if-goto WHILE_END1
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 2
push local 1
push local 2
add
push local 0
push local 1
call CellValue.empty 0
call Cell.new 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
call CellValue.empty 0
pop this 2
push pointer 0
return
function Board.getWinnerChar 0
push argument 0
pop pointer 0
push this 2
return
function Board.makeMove 3
push argument 0
pop pointer 0
push argument 1
call Cell.getX 1
pop local 1
push argument 1
call Cell.getY 1
pop local 2
push local 1
push this 0
add
pop pointer 1
push that 0
pop local 0
push local 2
push local 0
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Board.checkWinner 5
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push pointer 0
push local 0
call Board.IsRowWin 2
pop local 1
push pointer 0
push local 0
call Board.IsColumnWin 2
pop local 2
push local 1
push local 2
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
call Board.IsMainDiagWin 1
pop local 3
push pointer 0
call Board.IsSecondaryDiagWin 1
pop local 4
push local 3
push local 4
or
return
function Board.IsRowWin 5
push argument 0
pop pointer 0
push constant 1
pop local 0
push argument 1
push this 0
add
pop pointer 1
push that 0
pop local 1
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push local 0
push local 1
add
pop pointer 1
push that 0
pop local 3
push local 0
push constant 1
sub
push local 1
add
pop pointer 1
push that 0
pop local 4
push local 3
push local 4
call Cell.equalsByValue 2
not
push local 3
call Cell.isEmpty 1
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push constant 1
sub
push local 1
add
pop pointer 1
push that 0
pop local 2
push local 2
call Cell.getValue 1
pop this 2
push local 1
call Array.dispose 1
pop temp 0
push constant 0
not
return
function Board.IsColumnWin 6
push argument 0
pop pointer 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 4
push local 0
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
pop local 5
push argument 1
push local 4
add
pop pointer 1
push that 0
pop local 2
push argument 1
push local 5
add
pop pointer 1
push that 0
pop local 3
push local 2
push local 3
call Cell.equalsByValue 2
not
push local 2
call Cell.isEmpty 1
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 1
push local 4
add
pop pointer 1
push that 0
pop local 1
push local 1
call Cell.getValue 1
pop this 2
push local 4
call Array.dispose 1
pop temp 0
push local 5
call Array.dispose 1
pop temp 0
push constant 0
not
return
function Board.IsMainDiagWin 6
push argument 0
pop pointer 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 4
push local 0
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
pop local 5
push local 0
push local 4
add
pop pointer 1
push that 0
pop local 2
push local 0
push constant 1
sub
push local 5
add
pop pointer 1
push that 0
pop local 3
push local 2
push local 3
call Cell.equalsByValue 2
not
push local 2
call Cell.isEmpty 1
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push constant 1
sub
push local 4
add
pop pointer 1
push that 0
pop local 1
push local 1
call Cell.getValue 1
pop this 2
push local 4
call Array.dispose 1
pop temp 0
push local 5
call Array.dispose 1
pop temp 0
push constant 0
not
return
function Board.IsSecondaryDiagWin 6
push argument 0
pop pointer 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 4
push local 0
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
pop local 5
push this 1
push local 0
sub
push constant 1
sub
push local 4
add
pop pointer 1
push that 0
pop local 2
push this 1
push local 0
sub
push local 5
add
pop pointer 1
push that 0
pop local 3
push local 2
push local 3
call Cell.equalsByValue 2
not
push local 2
call Cell.isEmpty 1
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
push local 4
add
pop pointer 1
push that 0
pop local 1
push local 1
call Cell.getValue 1
pop this 2
push local 4
call Array.dispose 1
pop temp 0
push local 5
call Array.dispose 1
pop temp 0
push constant 0
not
return
function Board.allCellsFilled 4
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 2
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 1
lt
not
if-goto WHILE_END1
push local 1
push local 2
add
pop pointer 1
push that 0
pop local 3
push local 3
call Cell.isEmpty 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
function Board.isCellFilled 2
push argument 0
pop pointer 0
push argument 1
push this 0
add
pop pointer 1
push that 0
pop local 0
push argument 2
push local 0
add
pop pointer 1
push that 0
pop local 1
push local 1
call Cell.isFilled 1
return
function Board.clear 3
push argument 0
pop pointer 0
push this 1
call Array.new 1
pop this 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
push this 1
call Array.new 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 1
lt
not
if-goto WHILE_END1
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 2
push local 1
push local 2
add
push local 0
push local 1
call CellValue.empty 0
call Cell.new 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
call CellValue.empty 0
pop this 2
push constant 0
return
function Board.dispose 2
push argument 0
pop pointer 0
push constant 0
pop local 0
push this 0
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Board.print 4
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 1
lt
not
if-goto WHILE_END1
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 2
push local 1
push local 2
add
pop pointer 1
push that 0
pop local 3
push local 3
call Cell.getValue 1
call Output.printChar 1
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
call String.newLine 0
call Output.printChar 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
